python_types = {
    "boolean": "bool",
    "number": "float",
    "string": "str",
    "enum": "str",
    "integer": "int",
    "timestamp": "str",
    "date": "str",
    "link": "int",
}


def write_file(schema: dict, file_path: str):
    with open(file_path, "w") as writer:
        writer.write(
            """# This code is generated
# Please do NOT edit this file
from typing import List
from dataclasses import dataclass
from label.schemas.common.record import Record

"""
        )
        for table in schema:
            writer.write(pretty_class(table, schema[table]["properties"]))


def pretty_class(class_name: str, fields: dict):
    attributes_list = [build_field(field, tpe) for field, tpe in fields.items()]
    attributes = """
    """.join(
        attributes_list
    )
    return f"""
@dataclass
class {class_name}(Record):
    {attributes}

"""


def build_field(name, props):
    if props["type"] == "array":
        tpe = build_array_type(props)
    else:
        tpe = get_python_type(props["type"])
    return f"{name}: {tpe}"


def build_array_type(props: dict):
    if props["type"] == "array":
        sub = build_array_type(props["items"])
        field = f"List[{sub}]"
        return field
    return get_python_type(props["type"])


def get_python_type(tpe: str):
    return python_types.get(tpe, tpe)
